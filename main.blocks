<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="L}Q82rH/~1k~oE(Pz!)9" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=",h^#y*n}K{5s*0uLIR44" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace coloursensorsim {" line1="" line2="    export enum Colour {" line3="        Red, " line4="        Green," line5="        Black," line6="        Blue," line7="        Yellow" line8="    }" line9="" line10="    export enum LedColour {" line11="        Red, Green, Blue" line12="    }" line13="" line14="    let currentBoxColour :Colour" line15="    let redLedOn : boolean" line16="    let greenLedOn : boolean" line17="    let blueLedOn : boolean" line18="    let environmentLight : number" line19="" line20="    let speed = 1;" line21="" line22="    //%block" line23="    //%blockid=coloursensorsimsetspeed block=&quot;set simulator speed to %speed&quot;" line24="    export function setSpeed(speed:number) {" line25="        speed = speed" line26="    }" line27="    " line28="    //%block" line29="    //%blockid=coloursensorsimgiveanswer block=&quot;give answer %colour&quot;" line30="    export function giveAnswer(colour:Colour) {" line31="        console.log(&quot;receiving answer:&quot; + colour + &quot;, actual answer: &quot; + currentBoxColour)" line32="        if (colour == currentBoxColour) {" line33="            game.over(true)" line34="        } else {" line35="            game.over(false)" line36="        }" line37="    }" line38="" line39="    //%block" line40="    //%blockid=coloursensorsiminit block=&quot;init new test&quot;" line41="    export function initTest() {" line42="        currentBoxColour = Math.pickRandom([Colour.Red, Colour.Green," line43="         Colour.Black, Colour.Blue, Colour.Yellow])" line44="         redLedOn = false" line45="         greenLedOn = false" line46="         blueLedOn = false" line47="" line48="         environmentLight = randint(100,200) // mimic random environment light level;" line49="    }" line50="" line51="    //%block" line52="    //%blockid=coloursensorsimpause block=&quot;pause %millis&quot;" line53="    export function pause(millis:number) {" line54="        pause(millis * speed)" line55="    }" line56="" line57="    //%block" line58="    //%blockid=coloursensorsimswitchled block=&quot;switch %ledColour LED to %on&quot;" line59="    export function switchLed(ledColour : LedColour, on:boolean) {" line60="        switch(ledColour) {" line61="            case LedColour.Red: " line62="                redLedOn = on; " line63="                break;" line64="            case LedColour.Green: " line65="                greenLedOn = on; " line66="                break;" line67="            case LedColour.Blue: " line68="                blueLedOn = on; " line69="                break;" line70="        }" line71="    }" line72="" line73="    //%block" line74="    //%blockid=coloursensorsimreadlightsensor block=&quot;read current light sensor value under LEDs status&quot;" line75="    export function readLightSensorValue() :number {" line76="        // TODO: sim return value according to RGB on/off and box colour combinations" line77="" line78="        let result = environmentLight" line79="" line80="        if (redLedOn &amp;&amp; currentBoxColour == Colour.Red) {" line81="            result += randint(100, 200) // led:box colour match" line82="        }" line83="" line84="        if (greenLedOn &amp;&amp; currentBoxColour == Colour.Green) {" line85="            result += randint(100, 200) // led:box colour match" line86="        }" line87="" line88="        if (blueLedOn &amp;&amp; currentBoxColour == Colour.Blue) {" line89="            result += randint(100, 200) // led:box colour match" line90="        }" line91="" line92="        if (blueLedOn &amp;&amp; currentBoxColour == Colour.Yellow) {" line93="            result += randint(50, 100)" line94="        }" line95="" line96="        if (greenLedOn &amp;&amp; currentBoxColour == Colour.Yellow) {" line97="            result += randint(50, 100)" line98="        }" line99="" line100="        console.log(&quot;light sensor under [RGB]:[&quot; + redLedOn + &quot;|&quot; + greenLedOn +  &quot;|&quot;  + blueLedOn + &quot;]=&quot; + result)" line101="        return result" line102="    }" line103="" line104="}" numlines="105"></mutation></block></statement></block></xml>